---
layout:     post
title:      "V8引擎漏洞分析环境与调试方法基础"
subtitle:   ""
date:       2019-07-25 10:30:00
author:     "GToad"
header-img: "img/android-five.png"
catalog: true
tags:
    - Android
    - NDK
    - Hook
    - arm64
    - inline hook
    - native hook
    - LTS
---

> 本文为本博客V8系列第一篇，主要介绍一下基础的漏洞调试分析环境等。

## V8环境搭建

本人使用Ubuntu16.04。

根据官方文档可知，先要进行deptools的安装。先git clone下项目。

```
git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
```

再将其加入环境变量以方便执行：

```
export PATH=$PATH:/path/to/depot_tools
```

然后进行V8源码的下载。
```
fetch v8
gclient sync
```

## 调试方法

使用`GDB`进行调试，V8团队还写了个GDB的辅助调试脚本，可以从[这里](https://github.com/GToad/GToad.github.io/releases/download/20190930/gdbinit_v8)下载,也可以直接复制黏贴下方脚本。
```
# Copyright 2014 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# Print tagged object.
define job
call (void) _v8_internal_Print_Object((void*)($arg0))
end
document job
Print a v8 JavaScript object
Usage: job tagged_ptr
end

# Print content of v8::internal::Handle.
define jh
call (void) _v8_internal_Print_Object(*((v8::internal::Object**)($arg0).location_))
end
document jh
Print content of a v8::internal::Handle
Usage: jh internal_handle
end

# Print content of v8::Local handle.
define jlh
call (void) _v8_internal_Print_Object(*((v8::internal::Object**)($arg0).val_))
end
document jlh
Print content of a v8::Local handle
Usage: jlh local_handle
end

# Print Code objects containing given PC.
define jco
call (void) _v8_internal_Print_Code((void*)($arg0))
end
document jco
Print a v8 Code object from an internal code address
Usage: jco pc
end

# Print LayoutDescriptor.
define jld
call (void) _v8_internal_Print_LayoutDescriptor((void*)($arg0))
end
document jld
Print a v8 LayoutDescriptor object
Usage: jld tagged_ptr
end

# Print TransitionTree.
define jtt
call (void) _v8_internal_Print_TransitionTree((void*)($arg0))
end
document jtt
Print the complete transition tree of the given v8 Map.
Usage: jtt tagged_ptr
end

# Print JavaScript stack trace.
define jst
call (void) _v8_internal_Print_StackTrace()
end
document jst
Print the current JavaScript stack trace
Usage: jst
end

# Print TurboFan graph node.
define pn
call _v8_internal_Node_Print((void*)($arg0))
end
document pn
Print a v8 TurboFan graph node
Usage: pn node_address
end

# Skip the JavaScript stack.
define jss
set $js_entry_sp=v8::internal::Isolate::Current()->thread_local_top()->js_entry_sp_
set $rbp=*(void**)$js_entry_sp
set $rsp=$js_entry_sp + 2*sizeof(void*)
set $pc=*(void**)($js_entry_sp+sizeof(void*))
end
document jss
Skip the jitted stack on x64 to where we entered JS last.
Usage: jss
end

# Print stack trace with assertion scopes.
define bta
python
import re
frame_re = re.compile("^#(\d+)\s*(?:0x[a-f\d]+ in )?(.+) \(.+ at (.+)")
assert_re = re.compile("^\s*(\S+) = .+<v8::internal::Per\w+AssertScope<v8::internal::(\S*), (false|true)>")
btl = gdb.execute("backtrace full", to_string = True).splitlines()
for l in btl:
  match = frame_re.match(l)
  if match:
    print("[%-2s] %-60s %-40s" % (match.group(1), match.group(2), match.group(3)))
  match = assert_re.match(l)
  if match:
    if match.group(3) == "false":
      prefix = "Disallow"
      color = "\033[91m"
    else:
      prefix = "Allow"
      color = "\033[92m"
    print("%s -> %s %s (%s)\033[0m" % (color, prefix, match.group(2), match.group(1)))
end
end
document bta
Print stack trace with assertion scopes
Usage: bta
end

# Search for a pointer inside all valid pages.
define space_find
  set $space = $arg0
  set $current_page = $space->first_page()
  while ($current_page != 0)
    printf "#   Searching in %p - %p\n", $current_page->area_start(), $current_page->area_end()-1
    find $current_page->area_start(), $current_page->area_end()-1, $arg1
    set $current_page = $current_page->next_page()
  end
end

define heap_find
  set $heap = v8::internal::Isolate::Current()->heap()
  printf "# Searching for %p in old_space  ===============================\n", $arg0
  space_find $heap->old_space() ($arg0)
  printf "# Searching for %p in map_space  ===============================\n", $arg0
  space_find $heap->map_space() $arg0
  printf "# Searching for %p in code_space ===============================\n", $arg0
  space_find $heap->code_space() $arg0
end
document heap_find
Find the location of a given address in V8 pages.
Usage: heap_find address
end

set disassembly-flavor intel
set disable-randomization off

# Install a handler whenever the debugger stops due to a signal. It walks up the
# stack looking for V8_Dcheck and moves the frame to the one above it so it's
# immediately at the line of code that triggered the DCHECK.
python
def dcheck_stop_handler(event):
  frame = gdb.selected_frame()
  select_frame = None
  message = None
  count = 0
  # limit stack scanning since they're usually shallow and otherwise stack
  # overflows can be very slow.
  while frame is not None and count < 5:
    count += 1
    if frame.name() == 'V8_Dcheck':
      frame_message = gdb.lookup_symbol('message', frame.block())[0]
      if frame_message:
        message = frame_message.value(frame).string()
      select_frame = frame.older()
      break
    if frame.name() is not None and frame.name().startswith('V8_Fatal'):
      select_frame = frame.older()
    frame = frame.older()

  if select_frame is not None:
    select_frame.select()
    gdb.execute('frame')
    if message:
      print('DCHECK error: {}'.format(message))

gdb.events.stop.connect(dcheck_stop_handler)
end

# Code imported from chromium/src/tools/gdb/gdbinit
python

import os
import subprocess
import sys

compile_dirs = set()


def get_current_debug_file_directories():
  dir = gdb.execute("show debug-file-directory", to_string=True)
  dir = dir[
      len('The directory where separate debug symbols are searched for is "'
         ):-len('".') - 1]
  return set(dir.split(":"))


def add_debug_file_directory(dir):
  # gdb has no function to add debug-file-directory, simulates that by using
  # `show debug-file-directory` and `set debug-file-directory <directories>`.
  current_dirs = get_current_debug_file_directories()
  current_dirs.add(dir)
  gdb.execute(
      "set debug-file-directory %s" % ":".join(current_dirs), to_string=True)


def newobj_handler(event):
  global compile_dirs
  compile_dir = os.path.dirname(event.new_objfile.filename)
  if not compile_dir:
    return
  if compile_dir in compile_dirs:
    return
  compile_dirs.add(compile_dir)

  # Add source path
  gdb.execute("dir %s" % compile_dir)

  # Need to tell the location of .dwo files.
  # https://sourceware.org/gdb/onlinedocs/gdb/Separate-Debug-Files.html
  # https://crbug.com/603286#c35
  add_debug_file_directory(compile_dir)

# Event hook for newly loaded objfiles.
# https://sourceware.org/gdb/onlinedocs/gdb/Events-In-Python.html
gdb.events.new_objfile.connect(newobj_handler)

gdb.execute("set environment V8_GDBINIT_SOURCED=1")

end
```

找到想要调试的JS脚本，通过在脚本中事先添加两种代码来辅助之后的调试过程：
1. `%DebugPrint(arg1)`——该方法会打印目标对象的内存地址并对其主要信息进行输出。
2. `%SystemBreak()`——该方法可以在脚本中下断点。

%DebugPrint方法输出例子如下：
```
DebugPrint: 0x36922172ba11: [Function]
 - map = 0x2c928df840f1 [FastProperties]
 - prototype = 0x3692217040b9
 - elements = 0x21c960102241 <FixedArray[0]> [FAST_HOLEY_ELEMENTS]
 - initial_map = 
 - shared_info = 0x36922172b4c9 <SharedFunctionInfo Check>
 - name = 0x36922172aff9 <String[5]: Check>
 - formal_parameter_count = 0
 - context = 0x369221703951 <FixedArray[235]>
 - literals = 0x21c960104b21 <FixedArray[1]>
 - code = 0x3e808c684481 <Code: BUILTIN>
 - properties = {
   #length: 0x21c9601555d9 <AccessorInfo> (accessor constant)
   #name: 0x21c960155649 <AccessorInfo> (accessor constant)
   #arguments: 0x21c9601556b9 <AccessorInfo> (accessor constant)
   #caller: 0x21c960155729 <AccessorInfo> (accessor constant)
   #prototype: 0x21c960155799 <AccessorInfo> (accessor constant)
 }
0x2c928df840f1: [Map]
 - type: JS_FUNCTION_TYPE
 - instance size: 72
 - inobject properties: 0
 - elements kind: FAST_HOLEY_ELEMENTS
 - unused property fields: 0
 - enum length: invalid
 - stable_map
 - callable
 - constructor
 - back pointer: 0x21c960102311 <undefined>
 - instance descriptors (own) #5: 0x36922170ac59 <FixedArray[17]>
 - layout descriptor: 0
 - prototype: 0x3692217040b9 <JS Function (SharedFunctionInfo 0x21c960107ec9)>
 - constructor: 0x36922170ab39 <JS Function Function (SharedFunctionInfo 0x21c96013b631)>
 - code cache: 0x21c960102241 <FixedArray[0]>
 - dependent code: 0x21c960102241 <FixedArray[0]>
 - construction counter: 0
```

使用GDB对编译出来的d8文件进行调试，并设定参数`set args --natives-syntax /path/to/jsscript.js`使其加载指定的JS脚本。

然后使用`r`命令运行后，脚本就会暂停在%SystemBreak()处，并且已经执行的`%DebugPrint()`方法会输出指定对象的信息。

使用gdb_init中的`job`指令可以对指定内存地址上的对象进行信息输出。
```
pwndbg> job 0x36922172ba11
0x36922172ba11: [Function]
 - map = 0x2c928df840f1 [FastProperties]
 - prototype = 0x3692217040b9
 - elements = 0x21c960102241 <FixedArray[0]> [FAST_HOLEY_ELEMENTS]
 - initial_map = 
 - shared_info = 0x36922172b4c9 <SharedFunctionInfo Check>
 - name = 0x36922172aff9 <String[5]: Check>
 - formal_parameter_count = 0
 - context = 0x369221703951 <FixedArray[235]>
 - literals = 0x21c960104b21 <FixedArray[1]>
 - code = 0x3e808c684481 <Code: BUILTIN>
 - properties = {
   #length: 0x21c9601555d9 <AccessorInfo> (accessor constant)
   #name: 0x21c960155649 <AccessorInfo> (accessor constant)
   #arguments: 0x21c9601556b9 <AccessorInfo> (accessor constant)
   #caller: 0x21c960155729 <AccessorInfo> (accessor constant)
   #prototype: 0x21c960155799 <AccessorInfo> (accessor constant)
```

注意，V8中object的地址+1才会被理解为object，否则末尾bit为0的话会被理解为SMI。具体JS引擎这么设计的原理可以参考这个[PPT](https://github.com/GToad/GToad.github.io/releases/download/20190930/blackhat_us_18_attacking_client_side_jit_compilers.pdf),这里就不多介绍了。

使用`telescope`查看指定内存的数据情况，此处由于不涉及对象的理解，直接使用实际地址即可。也可以使用GDB自带的`x/`命令，个人比较喜欢后者。

```
pwndbg> telescope 0x36922172ba10
00:0000│   0x36922172ba10 —▸ 0x2c928df840f1 ◂— 0x90000037e29e022
01:0008│   0x36922172ba18 —▸ 0x21c960102241 ◂— 0x37e29e023
... ↓
03:0018│   0x36922172ba28 —▸ 0x21c960102351 ◂— 0xff0000037e29e025
04:0020│   0x36922172ba30 —▸ 0x36922172b4c9 ◂— 0x810000037e29e028
05:0028│   0x36922172ba38 —▸ 0x369221703951 ◂— 0x37e29e02c
06:0030│   0x36922172ba40 —▸ 0x21c960104b21 ◂— 0x37e29e023
07:0038│   0x36922172ba48 —▸ 0x3e808c6844e0 ◂— mov    r8, qword ptr [rdi + 0x1f] /* 0x17408b4d1f478b4c */
```

## 漏洞版本

之前编译的V8版本可能不是已知存在漏洞的版本，为了验证V8的漏洞，我们需要去查看漏洞信息，找到修复该漏洞的版本，然后记下该版本的上一个版本。最后使用`git checkout`命令来切换后，重新进行编译。例如CVE-2016-5198：

```
git checkout a7a350012c05f644f3f373fb48d7ac72f7f60542
gclient sync
tools/dev/v8gen.py x64.debug
ninja -C out.gn/x64.debug d8
```

使用编译后的d8对漏洞的POC进行运行，如果能够达到异常的效果则说明版本对了，然后进一步使用上面的方法进行调试。

## 参考

[Attacking Client-Side JIT Compilers](https://github.com/GToad/GToad.github.io/releases/download/20190930/blackhat_us_18_attacking_client_side_jit_compilers.pdf)
[StarCTF-Freebuf](https://www.freebuf.com/vuls/203721.html)