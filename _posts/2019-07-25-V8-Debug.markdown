---
layout:     post
title:      "V8引擎漏洞分析环境与调试方法基础"
subtitle:   ""
date:       2019-07-25 10:30:00
author:     "GToad"
header-img: "img/android-five.png"
catalog: true
tags:
    - Android
    - NDK
    - Hook
    - arm64
    - inline hook
    - native hook
    - LTS
---

> 本文为本博客V8系列第一篇，主要介绍一下基础的漏洞调试分析环境等。

## V8环境搭建

本人使用Ubuntu16.04。

根据官方文档可知，先要进行deptools的安装。

然后进行源码的下载。

## 调试方法

使用`GDB`进行调试，V8团队还写了个GDB的辅助调试脚本，可以从[这里]()下载。

找到想要调试的JS脚本，通过在脚本中事先添加两种代码来辅助之后的调试过程：
1. %DebugPrint(arg1)——该方法会打印目标对象的内存地址并对其主要信息进行输出。
2. %SystemBreak()——该方法可以在脚本中下断点。

使用GDB对编译出来的d8文件进行调试，并设定参数`set args --natives-syntax /path/to/jsscript.js`使其加载指定的JS脚本。

然后使用`r`命令运行后，脚本就会暂停在%SystemBreak()处，并且已经执行的%DebugPrint()方法会输出指定对象的信息。

使用gdb_init中的`job`指令可以对指定内存地址上的对象进行信息输出。注意，V8中object的地址+1才会被理解为object，否则末尾bit为0的话会被理解为SMI。具体JS引擎这么设计的原理可以参考这个[PPT](),这里就不多介绍了。

使用`telescope`查看指定内存的数据情况，此处由于不涉及对象的理解，直接使用实际地址即可。也可以使用GDB自带的`x/`命令，个人比较喜欢后者。

## 漏洞版本

之前编译的V8版本可能不是已知存在漏洞的版本，为了验证V8的漏洞，我们需要去查看漏洞信息，找到修复该漏洞的版本，然后记下该版本的上一个版本。最后使用`git checkout`命令来切换后，重新进行编译。

使用编译后的d8对漏洞的POC进行运行，如果能够达到异常的效果则说明版本对了，然后进一步使用上面的方法进行调试。